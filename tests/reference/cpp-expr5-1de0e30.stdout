([1m[35mTranslationUnit[39m[0m 
   ([33mSymbolTable[39m 
      1 
      {
         test_StrOp_concat: 
            ([1m[35mSubroutine[39m[0m 
               ([33mSymbolTable[39m 
                  2 
                  {
                     s: 
                        ([1m[35mVariable[39m[0m 
                           2 
                           s [1m[32m
                           Local[39m[0m () () [1m[32m
                           Default[39m[0m 
                           ([1m[35mCharacter[39m[0m 1 -2 () []) [1m[32m
                           Source[39m[0m [1m[32m
                           Public[39m[0m [1m[32m
                           Required[39m[0m .false.)
                  }) 
               test_StrOp_concat [] [
               ([1m[35m=[39m[0m 
                  ([1m[35mVar[39m[0m 2 [33ms[39m) 
                  ([1m[35mStringConcat[39m[0m 
                     ([1m[35mStringConstant[39m[0m "3" 
                        ([1m[35mCharacter[39m[0m 1 1 () [])) 
                     ([1m[35mStringConstant[39m[0m "4" 
                        ([1m[35mCharacter[39m[0m 1 1 () [])) 
                     ([1m[35mCharacter[39m[0m 1 2 () []) 
                     ([1m[35mStringConstant[39m[0m "34" 
                        ([1m[35mCharacter[39m[0m 1 2 () []))) ()) 
               ([1m[35m=[39m[0m 
                  ([1m[35mVar[39m[0m 2 [33ms[39m) 
                  ([1m[35mStringConcat[39m[0m 
                     ([1m[35mStringConstant[39m[0m "a " 
                        ([1m[35mCharacter[39m[0m 1 2 () [])) 
                     ([1m[35mStringConstant[39m[0m "test" 
                        ([1m[35mCharacter[39m[0m 1 4 () [])) 
                     ([1m[35mCharacter[39m[0m 1 6 () []) 
                     ([1m[35mStringConstant[39m[0m "a test" 
                        ([1m[35mCharacter[39m[0m 1 6 () []))) ()) 
               ([1m[35m=[39m[0m 
                  ([1m[35mVar[39m[0m 2 [33ms[39m) 
                  ([1m[35mStringConcat[39m[0m 
                     ([1m[35mStringConcat[39m[0m 
                        ([1m[35mStringConstant[39m[0m "test" 
                           ([1m[35mCharacter[39m[0m 1 4 () [])) 
                        ([1m[35mStringConstant[39m[0m "test" 
                           ([1m[35mCharacter[39m[0m 1 4 () [])) 
                        ([1m[35mCharacter[39m[0m 1 8 () []) 
                        ([1m[35mStringConstant[39m[0m "testtest" 
                           ([1m[35mCharacter[39m[0m 1 8 () []))) 
                     ([1m[35mStringConstant[39m[0m "test" 
                        ([1m[35mCharacter[39m[0m 1 4 () [])) 
                     ([1m[35mCharacter[39m[0m 1 12 () []) 
                     ([1m[35mStringConstant[39m[0m "testtesttest" 
                        ([1m[35mCharacter[39m[0m 1 12 () []))) ())] [1m[32m
               Source[39m[0m [1m[32m
               Public[39m[0m [1m[32m
               Implementation[39m[0m () .false. .false.)
      }) 
   [])
#include <iostream>
#include <string>
#include <vector>
#include <cassert>
#include <cmath>
#include <complex>
#include <Kokkos_Core.hpp>
#include <lfortran_intrinsics.h>

template <typename T>
Kokkos::View<T*> from_std_vector(const std::vector<T> &v)
{
    Kokkos::View<T*> r("r", v.size());
    for (size_t i=0; i < v.size(); i++) {
        r(i) = v[i];
    }
    return r;
}

// Forward declarations
void test_StrOp_concat();
namespace {
}

// Implementations
void test_StrOp_concat()
{
    std::string s;
    s = std::string("3") + std::string("4");
    s = std::string("a ") + std::string("test");
    s = std::string(std::string("test") + std::string("test")) + std::string("test");
}

namespace {

void main2() {
}

}
int main(int argc, char* argv[])
{
    Kokkos::initialize(argc, argv);
    main2();
    Kokkos::finalize();
    return 0;
}
