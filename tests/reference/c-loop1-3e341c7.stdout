([1m[35mTranslationUnit[39m[0m 
   ([33mSymbolTable[39m 
      1 
      {
         main0: 
            ([1m[35mSubroutine[39m[0m 
               ([33mSymbolTable[39m 
                  5 
                  {
                     i: 
                        ([1m[35mVariable[39m[0m 
                           5 
                           i [1m[32m
                           Local[39m[0m () () [1m[32m
                           Default[39m[0m 
                           ([1m[35mInteger[39m[0m 4 []) [1m[32m
                           Source[39m[0m [1m[32m
                           Public[39m[0m [1m[32m
                           Required[39m[0m .false.), 
                     j: 
                        ([1m[35mVariable[39m[0m 
                           5 
                           j [1m[32m
                           Local[39m[0m () () [1m[32m
                           Default[39m[0m 
                           ([1m[35mInteger[39m[0m 8 []) [1m[32m
                           Source[39m[0m [1m[32m
                           Public[39m[0m [1m[32m
                           Required[39m[0m .false.)
                  }) 
               main0 [] [
               ([1m[35m=[39m[0m 
                  ([1m[35mVar[39m[0m 5 [33mi[39m) 
                  ([1m[35mFunctionCall[39m[0m 1 [33mtest_factorial_1[39m () [
                     (([1m[35mIntegerConstant[39m[0m [36m4[39m 
                        ([1m[35mInteger[39m[0m 4 [])))] 
                     ([1m[35mInteger[39m[0m 4 []) () ()) ()) 
               ([1m[35m=[39m[0m 
                  ([1m[35mVar[39m[0m 5 [33mi[39m) 
                  ([1m[35mFunctionCall[39m[0m 1 [33mtest_factorial_2[39m () [
                     (([1m[35mIntegerConstant[39m[0m [36m4[39m 
                        ([1m[35mInteger[39m[0m 4 [])))] 
                     ([1m[35mInteger[39m[0m 4 []) () ()) ()) 
               ([1m[35m=[39m[0m 
                  ([1m[35mVar[39m[0m 5 [33mj[39m) 
                  ([1m[35mFunctionCall[39m[0m 1 [33mtest_factorial_3[39m () [
                     (([1m[35mIntegerConstant[39m[0m [36m5[39m 
                        ([1m[35mInteger[39m[0m 4 [])))] 
                     ([1m[35mInteger[39m[0m 8 []) () ()) ())] [1m[32m
               Source[39m[0m [1m[32m
               Public[39m[0m [1m[32m
               Implementation[39m[0m () .false. .false.), 
         test_factorial_1: 
            ([1m[35mFunction[39m[0m 
               ([33mSymbolTable[39m 
                  2 
                  {
                     _lpython_return_variable: 
                        ([1m[35mVariable[39m[0m 
                           2 
                           _lpython_return_variable [1m[32m
                           ReturnVar[39m[0m () () [1m[32m
                           Default[39m[0m 
                           ([1m[35mInteger[39m[0m 4 []) [1m[32m
                           Source[39m[0m [1m[32m
                           Public[39m[0m [1m[32m
                           Required[39m[0m .false.), 
                     result: 
                        ([1m[35mVariable[39m[0m 
                           2 
                           result [1m[32m
                           Local[39m[0m () () [1m[32m
                           Default[39m[0m 
                           ([1m[35mInteger[39m[0m 4 []) [1m[32m
                           Source[39m[0m [1m[32m
                           Public[39m[0m [1m[32m
                           Required[39m[0m .false.), 
                     x: 
                        ([1m[35mVariable[39m[0m 
                           2 
                           x [1m[32m
                           In[39m[0m () () [1m[32m
                           Default[39m[0m 
                           ([1m[35mInteger[39m[0m 4 []) [1m[32m
                           Source[39m[0m [1m[32m
                           Public[39m[0m [1m[32m
                           Required[39m[0m .false.)
                  }) 
               test_factorial_1 [
               ([1m[35mVar[39m[0m 2 [33mx[39m)] [
               ([1m[35mIf[39m[0m 
                  ([1m[35mIntegerCompare[39m[0m 
                     ([1m[35mVar[39m[0m 2 [33mx[39m) [1m[32m
                     Lt[39m[0m ([1m[35mIntegerConstant[39m[0m [36m0[39m 
                     ([1m[35mInteger[39m[0m 4 [])) 
                     ([1m[35mLogical[39m[0m 4 []) ()) [
                  ([1m[35m=[39m[0m 
                     ([1m[35mVar[39m[0m 2 [33m_lpython_return_variable[39m) ([1m[35mIntegerConstant[39m[0m [36m0[39m 
                     ([1m[35mInteger[39m[0m 4 [])) ()) 
                  ([1m[35mReturn[39m[0m)] []) 
               ([1m[35m=[39m[0m 
                  ([1m[35mVar[39m[0m 2 [33mresult[39m) ([1m[35mIntegerConstant[39m[0m [36m1[39m 
                  ([1m[35mInteger[39m[0m 4 [])) ()) 
               ([1m[35mWhileLoop[39m[0m 
                  ([1m[35mIntegerCompare[39m[0m 
                     ([1m[35mVar[39m[0m 2 [33mx[39m) [1m[32m
                     Gt[39m[0m ([1m[35mIntegerConstant[39m[0m [36m0[39m 
                     ([1m[35mInteger[39m[0m 4 [])) 
                     ([1m[35mLogical[39m[0m 4 []) ()) [
                  ([1m[35m=[39m[0m 
                     ([1m[35mVar[39m[0m 2 [33mresult[39m) 
                     ([1m[35mIntegerBinOp[39m[0m 
                        ([1m[35mVar[39m[0m 2 [33mresult[39m) [1m[32m
                        Mul[39m[0m 
                        ([1m[35mVar[39m[0m 2 [33mx[39m) 
                        ([1m[35mInteger[39m[0m 4 []) ()) ()) 
                  ([1m[35m=[39m[0m 
                     ([1m[35mVar[39m[0m 2 [33mx[39m) 
                     ([1m[35mIntegerBinOp[39m[0m 
                        ([1m[35mVar[39m[0m 2 [33mx[39m) [1m[32m
                        Sub[39m[0m ([1m[35mIntegerConstant[39m[0m [36m1[39m 
                        ([1m[35mInteger[39m[0m 4 [])) 
                        ([1m[35mInteger[39m[0m 4 []) ()) ())]) 
               ([1m[35m=[39m[0m 
                  ([1m[35mVar[39m[0m 2 [33m_lpython_return_variable[39m) 
                  ([1m[35mVar[39m[0m 2 [33mresult[39m) ()) 
               ([1m[35mReturn[39m[0m)] 
               ([1m[35mVar[39m[0m 2 [33m_lpython_return_variable[39m) [1m[32m
               Source[39m[0m [1m[32m
               Public[39m[0m [1m[32m
               Implementation[39m[0m ()), 
         test_factorial_2: 
            ([1m[35mFunction[39m[0m 
               ([33mSymbolTable[39m 
                  3 
                  {
                     _lpython_return_variable: 
                        ([1m[35mVariable[39m[0m 
                           3 
                           _lpython_return_variable [1m[32m
                           ReturnVar[39m[0m () () [1m[32m
                           Default[39m[0m 
                           ([1m[35mInteger[39m[0m 4 []) [1m[32m
                           Source[39m[0m [1m[32m
                           Public[39m[0m [1m[32m
                           Required[39m[0m .false.), 
                     i: 
                        ([1m[35mVariable[39m[0m 
                           3 
                           i [1m[32m
                           Local[39m[0m () () [1m[32m
                           Default[39m[0m 
                           ([1m[35mInteger[39m[0m 4 []) [1m[32m
                           Source[39m[0m [1m[32m
                           Public[39m[0m [1m[32m
                           Required[39m[0m .false.), 
                     result: 
                        ([1m[35mVariable[39m[0m 
                           3 
                           result [1m[32m
                           Local[39m[0m () () [1m[32m
                           Default[39m[0m 
                           ([1m[35mInteger[39m[0m 4 []) [1m[32m
                           Source[39m[0m [1m[32m
                           Public[39m[0m [1m[32m
                           Required[39m[0m .false.), 
                     x: 
                        ([1m[35mVariable[39m[0m 
                           3 
                           x [1m[32m
                           In[39m[0m () () [1m[32m
                           Default[39m[0m 
                           ([1m[35mInteger[39m[0m 4 []) [1m[32m
                           Source[39m[0m [1m[32m
                           Public[39m[0m [1m[32m
                           Required[39m[0m .false.)
                  }) 
               test_factorial_2 [
               ([1m[35mVar[39m[0m 3 [33mx[39m)] [
               ([1m[35m=[39m[0m 
                  ([1m[35mVar[39m[0m 3 [33mresult[39m) ([1m[35mIntegerConstant[39m[0m [36m1[39m 
                  ([1m[35mInteger[39m[0m 4 [])) ()) 
               ([1m[35mDoLoop[39m[0m 
                  (
                     ([1m[35mVar[39m[0m 3 [33mi[39m) ([1m[35mIntegerConstant[39m[0m [36m1[39m 
                     ([1m[35mInteger[39m[0m 4 [])) 
                     ([1m[35mIntegerBinOp[39m[0m 
                        ([1m[35mIntegerBinOp[39m[0m 
                           ([1m[35mVar[39m[0m 3 [33mx[39m) [1m[32m
                           Add[39m[0m ([1m[35mIntegerConstant[39m[0m [36m1[39m 
                           ([1m[35mInteger[39m[0m 4 [])) 
                           ([1m[35mInteger[39m[0m 4 []) ()) [1m[32m
                        Sub[39m[0m ([1m[35mIntegerConstant[39m[0m [36m1[39m 
                        ([1m[35mInteger[39m[0m 4 [])) 
                        ([1m[35mInteger[39m[0m 4 []) ()) ([1m[35mIntegerConstant[39m[0m [36m1[39m 
                     ([1m[35mInteger[39m[0m 4 []))) [
                  ([1m[35m=[39m[0m 
                     ([1m[35mVar[39m[0m 3 [33mresult[39m) 
                     ([1m[35mIntegerBinOp[39m[0m 
                        ([1m[35mVar[39m[0m 3 [33mresult[39m) [1m[32m
                        Mul[39m[0m 
                        ([1m[35mVar[39m[0m 3 [33mi[39m) 
                        ([1m[35mInteger[39m[0m 4 []) ()) ())]) 
               ([1m[35m=[39m[0m 
                  ([1m[35mVar[39m[0m 3 [33m_lpython_return_variable[39m) 
                  ([1m[35mVar[39m[0m 3 [33mresult[39m) ()) 
               ([1m[35mReturn[39m[0m)] 
               ([1m[35mVar[39m[0m 3 [33m_lpython_return_variable[39m) [1m[32m
               Source[39m[0m [1m[32m
               Public[39m[0m [1m[32m
               Implementation[39m[0m ()), 
         test_factorial_3: 
            ([1m[35mFunction[39m[0m 
               ([33mSymbolTable[39m 
                  4 
                  {
                     _lpython_return_variable: 
                        ([1m[35mVariable[39m[0m 
                           4 
                           _lpython_return_variable [1m[32m
                           ReturnVar[39m[0m () () [1m[32m
                           Default[39m[0m 
                           ([1m[35mInteger[39m[0m 8 []) [1m[32m
                           Source[39m[0m [1m[32m
                           Public[39m[0m [1m[32m
                           Required[39m[0m .false.), 
                     result: 
                        ([1m[35mVariable[39m[0m 
                           4 
                           result [1m[32m
                           Local[39m[0m () () [1m[32m
                           Default[39m[0m 
                           ([1m[35mInteger[39m[0m 8 []) [1m[32m
                           Source[39m[0m [1m[32m
                           Public[39m[0m [1m[32m
                           Required[39m[0m .false.), 
                     x: 
                        ([1m[35mVariable[39m[0m 
                           4 
                           x [1m[32m
                           In[39m[0m () () [1m[32m
                           Default[39m[0m 
                           ([1m[35mInteger[39m[0m 4 []) [1m[32m
                           Source[39m[0m [1m[32m
                           Public[39m[0m [1m[32m
                           Required[39m[0m .false.)
                  }) 
               test_factorial_3 [
               ([1m[35mVar[39m[0m 4 [33mx[39m)] [
               ([1m[35m=[39m[0m 
                  ([1m[35mVar[39m[0m 4 [33mresult[39m) 
                  ([1m[35mCast[39m[0m ([1m[35mIntegerConstant[39m[0m [36m0[39m 
                     ([1m[35mInteger[39m[0m 4 [])) [1m[32m
                     IntegerToInteger[39m[0m 
                     ([1m[35mInteger[39m[0m 8 []) ()) ()) 
               ([1m[35mIf[39m[0m 
                  ([1m[35mIntegerCompare[39m[0m 
                     ([1m[35mVar[39m[0m 4 [33mx[39m) [1m[32m
                     Lt[39m[0m ([1m[35mIntegerConstant[39m[0m [36m0[39m 
                     ([1m[35mInteger[39m[0m 4 [])) 
                     ([1m[35mLogical[39m[0m 4 []) ()) [
                  ([1m[35m=[39m[0m 
                     ([1m[35mVar[39m[0m 4 [33m_lpython_return_variable[39m) 
                     ([1m[35mVar[39m[0m 4 [33mresult[39m) ()) 
                  ([1m[35mReturn[39m[0m)] []) 
               ([1m[35m=[39m[0m 
                  ([1m[35mVar[39m[0m 4 [33mresult[39m) 
                  ([1m[35mCast[39m[0m ([1m[35mIntegerConstant[39m[0m [36m1[39m 
                     ([1m[35mInteger[39m[0m 4 [])) [1m[32m
                     IntegerToInteger[39m[0m 
                     ([1m[35mInteger[39m[0m 8 []) ()) ()) 
               ([1m[35mWhileLoop[39m[0m 
                  ([1m[35mIntegerCompare[39m[0m 
                     ([1m[35mVar[39m[0m 4 [33mx[39m) [1m[32m
                     Gt[39m[0m ([1m[35mIntegerConstant[39m[0m [36m0[39m 
                     ([1m[35mInteger[39m[0m 4 [])) 
                     ([1m[35mLogical[39m[0m 4 []) ()) [
                  ([1m[35m=[39m[0m 
                     ([1m[35mVar[39m[0m 4 [33mresult[39m) 
                     ([1m[35mIntegerBinOp[39m[0m 
                        ([1m[35mVar[39m[0m 4 [33mresult[39m) [1m[32m
                        Mul[39m[0m 
                        ([1m[35mCast[39m[0m 
                           ([1m[35mVar[39m[0m 4 [33mx[39m) [1m[32m
                           IntegerToInteger[39m[0m 
                           ([1m[35mInteger[39m[0m 8 []) ()) 
                        ([1m[35mInteger[39m[0m 8 []) ()) ()) 
                  ([1m[35m=[39m[0m 
                     ([1m[35mVar[39m[0m 4 [33mx[39m) 
                     ([1m[35mIntegerBinOp[39m[0m 
                        ([1m[35mVar[39m[0m 4 [33mx[39m) [1m[32m
                        Sub[39m[0m ([1m[35mIntegerConstant[39m[0m [36m1[39m 
                        ([1m[35mInteger[39m[0m 4 [])) 
                        ([1m[35mInteger[39m[0m 4 []) ()) ())]) 
               ([1m[35m=[39m[0m 
                  ([1m[35mVar[39m[0m 4 [33m_lpython_return_variable[39m) 
                  ([1m[35mVar[39m[0m 4 [33mresult[39m) ()) 
               ([1m[35mReturn[39m[0m)] 
               ([1m[35mVar[39m[0m 4 [33m_lpython_return_variable[39m) [1m[32m
               Source[39m[0m [1m[32m
               Public[39m[0m [1m[32m
               Implementation[39m[0m ())
      }) 
   [
   ([1m[35mSubroutineCall[39m[0m 1 [33mmain0[39m () [] ())])
#include <inttypes.h>

#include <stdlib.h>
#include <stdbool.h>
#include <stdio.h>
#include <lfortran_intrinsics.h>

#define ASSERT(cond)                                                           \
    {                                                                          \
        if (!(cond)) {                                                         \
            printf("%s%s", "ASSERT failed: ", __FILE__);                       \
            printf("%s%s", "\nfunction ", __func__);                           \
            printf("%s%d%s", "(), line number ", __LINE__, " at \n");          \
            printf("%s%s", #cond, "\n");                                       \
            exit(1);                                                           \
        }                                                                      \
    }
#define ASSERT_MSG(cond, msg)                                                  \
    {                                                                          \
        if (!(cond)) {                                                         \
            printf("%s%s", "ASSERT failed: ", __FILE__);                       \
            printf("%s%s", "\nfunction ", __func__);                           \
            printf("%s%d%s", "(), line number ", __LINE__, " at \n");          \
            printf("%s%s", #cond, "\n");                                       \
            printf("%s", "ERROR MESSAGE:\n");                                  \
            printf("%s%s", msg, "\n");                                         \
            exit(1);                                                           \
        }                                                                      \
    }

// Forward declarations
void _lpython_main_program();
void main0();
int32_t test_factorial_1(int32_t x);
int32_t test_factorial_2(int32_t x);
int64_t test_factorial_3(int32_t x);

// Implementations
void _lpython_main_program()
{
    main0();
}

void main0()
{
    int32_t i;
    int64_t j;
    i = test_factorial_1(4);
    i = test_factorial_2(4);
    j = test_factorial_3(5);
}

int32_t test_factorial_1(int32_t x)
{
    int32_t _lpython_return_variable;
    int32_t result;
    if (x < 0) {
        _lpython_return_variable = 0;
        return _lpython_return_variable;
    }
    result = 1;
    while (x > 0) {
        result = result*x;
        x = x - 1;
    }
    _lpython_return_variable = result;
    return _lpython_return_variable;
}

int32_t test_factorial_2(int32_t x)
{
    int32_t _lpython_return_variable;
    int32_t i;
    int32_t result;
    result = 1;
    for (i=1; i<=x + 1 - 1; i++) {
        result = result*i;
    }
    _lpython_return_variable = result;
    return _lpython_return_variable;
}

int64_t test_factorial_3(int32_t x)
{
    int64_t _lpython_return_variable;
    int64_t result;
    result = 0;
    if (x < 0) {
        _lpython_return_variable = result;
        return _lpython_return_variable;
    }
    result = 1;
    while (x > 0) {
        result = result*x;
        x = x - 1;
    }
    _lpython_return_variable = result;
    return _lpython_return_variable;
}

int main(int argc, char* argv[])
{
    _lpython_main_program();
    return 0;
}
