([1m[35mTranslationUnit[39m[0m 
   ([33mSymbolTable[39m 
      1 
      {
         main0: 
            ([1m[35mSubroutine[39m[0m 
               ([33mSymbolTable[39m 
                  2 
                  {
                     x: 
                        ([1m[35mVariable[39m[0m 
                           2 
                           x [1m[32m
                           Local[39m[0m () () [1m[32m
                           Default[39m[0m 
                           ([1m[35mInteger[39m[0m 4 []) [1m[32m
                           Source[39m[0m [1m[32m
                           Public[39m[0m [1m[32m
                           Required[39m[0m .false.), 
                     x2: 
                        ([1m[35mVariable[39m[0m 
                           2 
                           x2 [1m[32m
                           Local[39m[0m () () [1m[32m
                           Default[39m[0m 
                           ([1m[35mInteger[39m[0m 8 []) [1m[32m
                           Source[39m[0m [1m[32m
                           Public[39m[0m [1m[32m
                           Required[39m[0m .false.), 
                     y: 
                        ([1m[35mVariable[39m[0m 
                           2 
                           y [1m[32m
                           Local[39m[0m () () [1m[32m
                           Default[39m[0m 
                           ([1m[35mReal[39m[0m 4 []) [1m[32m
                           Source[39m[0m [1m[32m
                           Public[39m[0m [1m[32m
                           Required[39m[0m .false.), 
                     y2: 
                        ([1m[35mVariable[39m[0m 
                           2 
                           y2 [1m[32m
                           Local[39m[0m () () [1m[32m
                           Default[39m[0m 
                           ([1m[35mReal[39m[0m 8 []) [1m[32m
                           Source[39m[0m [1m[32m
                           Public[39m[0m [1m[32m
                           Required[39m[0m .false.)
                  }) 
               main0 [] [
               ([1m[35m=[39m[0m 
                  ([1m[35mVar[39m[0m 2 [33mx[39m) 
                  ([1m[35mIntegerBinOp[39m[0m 
                     ([1m[35mIntegerBinOp[39m[0m ([1m[35mIntegerConstant[39m[0m [36m2[39m 
                        ([1m[35mInteger[39m[0m 4 [])) [1m[32m
                        Add[39m[0m ([1m[35mIntegerConstant[39m[0m [36m3[39m 
                        ([1m[35mInteger[39m[0m 4 [])) 
                        ([1m[35mInteger[39m[0m 4 []) ([1m[35mIntegerConstant[39m[0m [36m5[39m 
                        ([1m[35mInteger[39m[0m 4 []))) [1m[32m
                     Mul[39m[0m ([1m[35mIntegerConstant[39m[0m [36m5[39m 
                     ([1m[35mInteger[39m[0m 4 [])) 
                     ([1m[35mInteger[39m[0m 4 []) ([1m[35mIntegerConstant[39m[0m [36m25[39m 
                     ([1m[35mInteger[39m[0m 4 []))) ()) 
               ([1m[35mPrint[39m[0m () [
                  ([1m[35mVar[39m[0m 2 [33mx[39m)] () ())] [1m[32m
               Source[39m[0m [1m[32m
               Public[39m[0m [1m[32m
               Implementation[39m[0m () .false. .false.)
      }) 
   [
   ([1m[35mSubroutineCall[39m[0m 1 [33mmain0[39m () [] ())])
; ModuleID = 'LFortran'
source_filename = "LFortran"

@0 = private unnamed_addr constant [2 x i8] c" \00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@2 = private unnamed_addr constant [5 x i8] c"%d%s\00", align 1

define void @_lpython_main_program() {
.entry:
  call void @main0()
  br label %return

return:                                           ; preds = %.entry
  ret void
}

define void @main0() {
.entry:
  %x = alloca i32, align 4
  %x2 = alloca i64, align 8
  %y = alloca float, align 4
  %y2 = alloca double, align 8
  store i32 25, i32* %x, align 4
  %0 = load i32, i32* %x, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i32 %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare void @_lfortran_printf(i8*, ...)

define i32 @main() {
.entry:
  call void @_lpython_main_program()
  ret i32 0
}
