([1m[35mTranslationUnit[39m[0m 
   ([33mSymbolTable[39m 
      1 
      {
         f: 
            ([1m[35mSubroutine[39m[0m 
               ([33mSymbolTable[39m 
                  2 
                  {
                     i: 
                        ([1m[35mVariable[39m[0m 
                           2 
                           i [1m[32m
                           Local[39m[0m () () [1m[32m
                           Default[39m[0m 
                           ([1m[35mInteger[39m[0m 4 []) [1m[32m
                           Source[39m[0m [1m[32m
                           Public[39m[0m [1m[32m
                           Required[39m[0m .false.), 
                     res: 
                        ([1m[35mVariable[39m[0m 
                           2 
                           res [1m[32m
                           Local[39m[0m () () [1m[32m
                           Default[39m[0m 
                           ([1m[35mInteger[39m[0m 4 []) [1m[32m
                           Source[39m[0m [1m[32m
                           Public[39m[0m [1m[32m
                           Required[39m[0m .false.)
                  }) 
               f [] [
               ([1m[35m=[39m[0m 
                  ([1m[35mVar[39m[0m 2 [33mi[39m) ([1m[35mIntegerConstant[39m[0m [36m5[39m 
                  ([1m[35mInteger[39m[0m 4 [])) ()) 
               ([1m[35m=[39m[0m 
                  ([1m[35mVar[39m[0m 2 [33mres[39m) 
                  ([1m[35mIntegerBitNot[39m[0m 
                     ([1m[35mVar[39m[0m 2 [33mi[39m) 
                     ([1m[35mInteger[39m[0m 4 []) ()) ()) 
               ([1m[35mAssert[39m[0m 
                  ([1m[35mIntegerCompare[39m[0m 
                     ([1m[35mVar[39m[0m 2 [33mres[39m) [1m[32m
                     Eq[39m[0m 
                     ([1m[35mIntegerUnaryMinus[39m[0m ([1m[35mIntegerConstant[39m[0m [36m6[39m 
                        ([1m[35mInteger[39m[0m 4 [])) 
                        ([1m[35mInteger[39m[0m 4 []) ([1m[35mIntegerConstant[39m[0m [36m-6[39m 
                        ([1m[35mInteger[39m[0m 4 []))) 
                     ([1m[35mLogical[39m[0m 4 []) ()) ()) 
               ([1m[35m=[39m[0m 
                  ([1m[35mVar[39m[0m 2 [33mi[39m) 
                  ([1m[35mIntegerUnaryMinus[39m[0m ([1m[35mIntegerConstant[39m[0m [36m235346[39m 
                     ([1m[35mInteger[39m[0m 4 [])) 
                     ([1m[35mInteger[39m[0m 4 []) ([1m[35mIntegerConstant[39m[0m [36m-235346[39m 
                     ([1m[35mInteger[39m[0m 4 []))) ()) 
               ([1m[35mAssert[39m[0m 
                  ([1m[35mIntegerCompare[39m[0m 
                     ([1m[35mIntegerBitNot[39m[0m 
                        ([1m[35mVar[39m[0m 2 [33mi[39m) 
                        ([1m[35mInteger[39m[0m 4 []) ()) [1m[32m
                     Eq[39m[0m ([1m[35mIntegerConstant[39m[0m [36m235345[39m 
                     ([1m[35mInteger[39m[0m 4 [])) 
                     ([1m[35mLogical[39m[0m 4 []) ()) ())] [1m[32m
               Source[39m[0m [1m[32m
               Public[39m[0m [1m[32m
               Implementation[39m[0m () .false. .false.)
      }) 
   [
   ([1m[35mSubroutineCall[39m[0m 1 [33mf[39m () [] ())])
; ModuleID = 'LFortran'
source_filename = "LFortran"

@0 = private unnamed_addr constant [16 x i8] c"AssertionError\0A\00", align 1
@1 = private unnamed_addr constant [16 x i8] c"AssertionError\0A\00", align 1

define void @_lpython_main_program() {
.entry:
  call void @f()
  br label %return

return:                                           ; preds = %.entry
  ret void
}

define void @f() {
.entry:
  %i = alloca i32, align 4
  %res = alloca i32, align 4
  store i32 5, i32* %i, align 4
  %0 = load i32, i32* %i, align 4
  %1 = xor i32 %0, -1
  store i32 %1, i32* %res, align 4
  %2 = load i32, i32* %res, align 4
  %3 = icmp eq i32 %2, -6
  br i1 %3, label %then, label %else

then:                                             ; preds = %.entry
  br label %ifcont

else:                                             ; preds = %.entry
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @0, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  store i32 -235346, i32* %i, align 4
  %4 = load i32, i32* %i, align 4
  %5 = xor i32 %4, -1
  %6 = icmp eq i32 %5, 235345
  br i1 %6, label %then1, label %else2

then1:                                            ; preds = %ifcont
  br label %ifcont3

else2:                                            ; preds = %ifcont
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @1, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont3

ifcont3:                                          ; preds = %else2, %then1
  br label %return

return:                                           ; preds = %ifcont3
  ret void
}

declare void @_lfortran_printf(i8*, ...)

declare void @exit(i32)

define i32 @main() {
.entry:
  call void @_lpython_main_program()
  ret i32 0
}
