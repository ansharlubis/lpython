([1m[35mTranslationUnit[39m[0m 
   ([33mSymbolTable[39m 
      1 
      {
         test_boolean_comparison: 
            ([1m[35mSubroutine[39m[0m 
               ([33mSymbolTable[39m 
                  2 
                  {
                     b1: 
                        ([1m[35mVariable[39m[0m 
                           2 
                           b1 [1m[32m
                           Local[39m[0m () () [1m[32m
                           Default[39m[0m 
                           ([1m[35mLogical[39m[0m 4 []) [1m[32m
                           Source[39m[0m [1m[32m
                           Public[39m[0m [1m[32m
                           Required[39m[0m .false.), 
                     b2: 
                        ([1m[35mVariable[39m[0m 
                           2 
                           b2 [1m[32m
                           Local[39m[0m () () [1m[32m
                           Default[39m[0m 
                           ([1m[35mLogical[39m[0m 4 []) [1m[32m
                           Source[39m[0m [1m[32m
                           Public[39m[0m [1m[32m
                           Required[39m[0m .false.), 
                     b3: 
                        ([1m[35mVariable[39m[0m 
                           2 
                           b3 [1m[32m
                           Local[39m[0m () () [1m[32m
                           Default[39m[0m 
                           ([1m[35mLogical[39m[0m 4 []) [1m[32m
                           Source[39m[0m [1m[32m
                           Public[39m[0m [1m[32m
                           Required[39m[0m .false.)
                  }) 
               test_boolean_comparison [] [
               ([1m[35m=[39m[0m 
                  ([1m[35mVar[39m[0m 2 [33mb1[39m) 
                  ([1m[35mLogicalConstant[39m[0m .true. 
                     ([1m[35mLogical[39m[0m 4 [])) ()) 
               ([1m[35m=[39m[0m 
                  ([1m[35mVar[39m[0m 2 [33mb2[39m) 
                  ([1m[35mLogicalConstant[39m[0m .true. 
                     ([1m[35mLogical[39m[0m 4 [])) ()) 
               ([1m[35m=[39m[0m 
                  ([1m[35mVar[39m[0m 2 [33mb3[39m) 
                  ([1m[35mLogicalConstant[39m[0m .false. 
                     ([1m[35mLogical[39m[0m 4 [])) ()) 
               ([1m[35m=[39m[0m 
                  ([1m[35mVar[39m[0m 2 [33mb1[39m) 
                  ([1m[35mLogicalCompare[39m[0m 
                     ([1m[35mVar[39m[0m 2 [33mb1[39m) [1m[32m
                     Gt[39m[0m 
                     ([1m[35mVar[39m[0m 2 [33mb2[39m) 
                     ([1m[35mLogical[39m[0m 4 []) ()) ()) 
               ([1m[35m=[39m[0m 
                  ([1m[35mVar[39m[0m 2 [33mb1[39m) 
                  ([1m[35mLogicalCompare[39m[0m 
                     ([1m[35mVar[39m[0m 2 [33mb1[39m) [1m[32m
                     Eq[39m[0m 
                     ([1m[35mVar[39m[0m 2 [33mb2[39m) 
                     ([1m[35mLogical[39m[0m 4 []) ()) ()) 
               ([1m[35m=[39m[0m 
                  ([1m[35mVar[39m[0m 2 [33mb1[39m) 
                  ([1m[35mLogicalCompare[39m[0m 
                     ([1m[35mVar[39m[0m 2 [33mb2[39m) [1m[32m
                     NotEq[39m[0m 
                     ([1m[35mVar[39m[0m 2 [33mb3[39m) 
                     ([1m[35mLogical[39m[0m 4 []) ()) ()) 
               ([1m[35m=[39m[0m 
                  ([1m[35mVar[39m[0m 2 [33mb1[39m) 
                  ([1m[35mLogicalCompare[39m[0m 
                     ([1m[35mVar[39m[0m 2 [33mb2[39m) [1m[32m
                     GtE[39m[0m 
                     ([1m[35mVar[39m[0m 2 [33mb3[39m) 
                     ([1m[35mLogical[39m[0m 4 []) ()) ()) 
               ([1m[35m=[39m[0m 
                  ([1m[35mVar[39m[0m 2 [33mb1[39m) 
                  ([1m[35mLogicalCompare[39m[0m 
                     ([1m[35mVar[39m[0m 2 [33mb2[39m) [1m[32m
                     LtE[39m[0m 
                     ([1m[35mVar[39m[0m 2 [33mb3[39m) 
                     ([1m[35mLogical[39m[0m 4 []) ()) ())] [1m[32m
               Source[39m[0m [1m[32m
               Public[39m[0m [1m[32m
               Implementation[39m[0m () .false. .false.)
      }) 
   [])
; ModuleID = 'LFortran'
source_filename = "LFortran"

define void @test_boolean_comparison() {
.entry:
  %b1 = alloca i1, align 1
  %b2 = alloca i1, align 1
  %b3 = alloca i1, align 1
  store i1 true, i1* %b1, align 1
  store i1 true, i1* %b2, align 1
  store i1 false, i1* %b3, align 1
  %0 = load i1, i1* %b1, align 1
  %1 = load i1, i1* %b2, align 1
  %2 = zext i1 %0 to i32
  %3 = zext i1 %1 to i32
  %4 = icmp ugt i32 %2, %3
  store i1 %4, i1* %b1, align 1
  %5 = load i1, i1* %b1, align 1
  %6 = load i1, i1* %b2, align 1
  %7 = zext i1 %5 to i32
  %8 = zext i1 %6 to i32
  %9 = icmp eq i32 %7, %8
  store i1 %9, i1* %b1, align 1
  %10 = load i1, i1* %b2, align 1
  %11 = load i1, i1* %b3, align 1
  %12 = zext i1 %10 to i32
  %13 = zext i1 %11 to i32
  %14 = icmp ne i32 %12, %13
  store i1 %14, i1* %b1, align 1
  %15 = load i1, i1* %b2, align 1
  %16 = load i1, i1* %b3, align 1
  %17 = zext i1 %15 to i32
  %18 = zext i1 %16 to i32
  %19 = icmp uge i32 %17, %18
  store i1 %19, i1* %b1, align 1
  %20 = load i1, i1* %b2, align 1
  %21 = load i1, i1* %b3, align 1
  %22 = zext i1 %20 to i32
  %23 = zext i1 %21 to i32
  %24 = icmp ule i32 %22, %23
  store i1 %24, i1* %b1, align 1
  br label %return

return:                                           ; preds = %.entry
  ret void
}

define i32 @main() {
.entry:
  ret i32 0
}
