([1m[35mTranslationUnit[39m[0m 
   ([33mSymbolTable[39m 
      1 
      {
         f: 
            ([1m[35mSubroutine[39m[0m 
               ([33mSymbolTable[39m 
                  2 
                  {
                     i: 
                        ([1m[35mVariable[39m[0m 
                           2 
                           i [1m[32m
                           Local[39m[0m () () [1m[32m
                           Default[39m[0m 
                           ([1m[35mInteger[39m[0m 4 []) [1m[32m
                           Source[39m[0m [1m[32m
                           Public[39m[0m [1m[32m
                           Required[39m[0m .false.), 
                     res: 
                        ([1m[35mVariable[39m[0m 
                           2 
                           res [1m[32m
                           Local[39m[0m () () [1m[32m
                           Default[39m[0m 
                           ([1m[35mInteger[39m[0m 4 []) [1m[32m
                           Source[39m[0m [1m[32m
                           Public[39m[0m [1m[32m
                           Required[39m[0m .false.)
                  }) 
               f [] [
               ([1m[35m=[39m[0m 
                  ([1m[35mVar[39m[0m 2 [33mi[39m) ([1m[35mIntegerConstant[39m[0m [36m5[39m 
                  ([1m[35mInteger[39m[0m 4 [])) ()) 
               ([1m[35m=[39m[0m 
                  ([1m[35mVar[39m[0m 2 [33mres[39m) 
                  ([1m[35mIntegerBitNot[39m[0m 
                     ([1m[35mVar[39m[0m 2 [33mi[39m) 
                     ([1m[35mInteger[39m[0m 4 []) ()) ()) 
               ([1m[35mAssert[39m[0m 
                  ([1m[35mIntegerCompare[39m[0m 
                     ([1m[35mVar[39m[0m 2 [33mres[39m) [1m[32m
                     Eq[39m[0m 
                     ([1m[35mIntegerUnaryMinus[39m[0m ([1m[35mIntegerConstant[39m[0m [36m6[39m 
                        ([1m[35mInteger[39m[0m 4 [])) 
                        ([1m[35mInteger[39m[0m 4 []) ([1m[35mIntegerConstant[39m[0m [36m-6[39m 
                        ([1m[35mInteger[39m[0m 4 []))) 
                     ([1m[35mLogical[39m[0m 4 []) ()) ()) 
               ([1m[35m=[39m[0m 
                  ([1m[35mVar[39m[0m 2 [33mi[39m) 
                  ([1m[35mIntegerUnaryMinus[39m[0m ([1m[35mIntegerConstant[39m[0m [36m235346[39m 
                     ([1m[35mInteger[39m[0m 4 [])) 
                     ([1m[35mInteger[39m[0m 4 []) ([1m[35mIntegerConstant[39m[0m [36m-235346[39m 
                     ([1m[35mInteger[39m[0m 4 []))) ()) 
               ([1m[35mAssert[39m[0m 
                  ([1m[35mIntegerCompare[39m[0m 
                     ([1m[35mIntegerBitNot[39m[0m 
                        ([1m[35mVar[39m[0m 2 [33mi[39m) 
                        ([1m[35mInteger[39m[0m 4 []) ()) [1m[32m
                     Eq[39m[0m ([1m[35mIntegerConstant[39m[0m [36m235345[39m 
                     ([1m[35mInteger[39m[0m 4 [])) 
                     ([1m[35mLogical[39m[0m 4 []) ()) ())] [1m[32m
               Source[39m[0m [1m[32m
               Public[39m[0m [1m[32m
               Implementation[39m[0m () .false. .false.)
      }) 
   [
   ([1m[35mSubroutineCall[39m[0m 1 [33mf[39m () [] ())])
#include <iostream>
#include <string>
#include <vector>
#include <cassert>
#include <cmath>
#include <complex>
#include <Kokkos_Core.hpp>
#include <lfortran_intrinsics.h>

template <typename T>
Kokkos::View<T*> from_std_vector(const std::vector<T> &v)
{
    Kokkos::View<T*> r("r", v.size());
    for (size_t i=0; i < v.size(); i++) {
        r(i) = v[i];
    }
    return r;
}

// Forward declarations
void _lpython_main_program();
void f();
namespace {
}

// Implementations
void _lpython_main_program()
{
    f();
}

void f()
{
    int i;
    int res;
    i = 5;
    res = ~i;
    assert (res == -6);
    i = -235346;
    assert (~i == 235345);
}

namespace {

void main2() {
    _lpython_main_program();
}

}
int main(int argc, char* argv[])
{
    Kokkos::initialize(argc, argv);
    main2();
    Kokkos::finalize();
    return 0;
}
