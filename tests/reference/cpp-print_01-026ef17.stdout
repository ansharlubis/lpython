([1m[35mTranslationUnit[39m[0m 
   ([33mSymbolTable[39m 
      1 
      {
         f: 
            ([1m[35mSubroutine[39m[0m 
               ([33mSymbolTable[39m 
                  2 
                  {
                     x: 
                        ([1m[35mVariable[39m[0m 
                           2 
                           x [1m[32m
                           Local[39m[0m () () [1m[32m
                           Default[39m[0m 
                           ([1m[35mCharacter[39m[0m 1 -2 () []) [1m[32m
                           Source[39m[0m [1m[32m
                           Public[39m[0m [1m[32m
                           Required[39m[0m .false.), 
                     y: 
                        ([1m[35mVariable[39m[0m 
                           2 
                           y [1m[32m
                           Local[39m[0m () () [1m[32m
                           Default[39m[0m 
                           ([1m[35mCharacter[39m[0m 1 -2 () []) [1m[32m
                           Source[39m[0m [1m[32m
                           Public[39m[0m [1m[32m
                           Required[39m[0m .false.)
                  }) 
               f [] [
               ([1m[35mPrint[39m[0m () [
                  ([1m[35mStringConstant[39m[0m "Hello World!" 
                     ([1m[35mCharacter[39m[0m 1 12 () []))] () ()) 
               ([1m[35m=[39m[0m 
                  ([1m[35mVar[39m[0m 2 [33mx[39m) 
                  ([1m[35mStringConstant[39m[0m "," 
                     ([1m[35mCharacter[39m[0m 1 1 () [])) ()) 
               ([1m[35m=[39m[0m 
                  ([1m[35mVar[39m[0m 2 [33my[39m) 
                  ([1m[35mStringConstant[39m[0m "!!" 
                     ([1m[35mCharacter[39m[0m 1 2 () [])) ()) 
               ([1m[35mPrint[39m[0m () [
                  ([1m[35mStringConstant[39m[0m "a" 
                     ([1m[35mCharacter[39m[0m 1 1 () [])) 
                  ([1m[35mStringConstant[39m[0m "b" 
                     ([1m[35mCharacter[39m[0m 1 1 () []))] 
                  ([1m[35mVar[39m[0m 2 [33mx[39m) ()) 
               ([1m[35m=[39m[0m 
                  ([1m[35mVar[39m[0m 2 [33mx[39m) 
                  ([1m[35mStringConstant[39m[0m "-+-+-" 
                     ([1m[35mCharacter[39m[0m 1 5 () [])) ()) 
               ([1m[35mPrint[39m[0m () [
                  ([1m[35mStringConstant[39m[0m "a" 
                     ([1m[35mCharacter[39m[0m 1 1 () [])) 
                  ([1m[35mStringConstant[39m[0m "b" 
                     ([1m[35mCharacter[39m[0m 1 1 () [])) 
                  ([1m[35mStringConstant[39m[0m "c" 
                     ([1m[35mCharacter[39m[0m 1 1 () []))] 
                  ([1m[35mVar[39m[0m 2 [33mx[39m) ()) 
               ([1m[35mPrint[39m[0m () [
                  ([1m[35mStringConstant[39m[0m "d" 
                     ([1m[35mCharacter[39m[0m 1 1 () [])) 
                  ([1m[35mStringConstant[39m[0m "e" 
                     ([1m[35mCharacter[39m[0m 1 1 () [])) 
                  ([1m[35mStringConstant[39m[0m "f" 
                     ([1m[35mCharacter[39m[0m 1 1 () []))] 
                  ([1m[35mStringConstant[39m[0m "=" 
                     ([1m[35mCharacter[39m[0m 1 1 () [])) 
                  ([1m[35mStringConstant[39m[0m "+
" 
                     ([1m[35mCharacter[39m[0m 1 2 () []))) 
               ([1m[35mPrint[39m[0m () [
                  ([1m[35mStringConstant[39m[0m "x" 
                     ([1m[35mCharacter[39m[0m 1 1 () [])) 
                  ([1m[35mStringConstant[39m[0m "y" 
                     ([1m[35mCharacter[39m[0m 1 1 () [])) 
                  ([1m[35mStringConstant[39m[0m "z" 
                     ([1m[35mCharacter[39m[0m 1 1 () []))] 
                  ([1m[35mStringConstant[39m[0m "*
" 
                     ([1m[35mCharacter[39m[0m 1 2 () [])) 
                  ([1m[35mVar[39m[0m 2 [33my[39m)) 
               ([1m[35mPrint[39m[0m () [
                  ([1m[35mStringConstant[39m[0m "1" 
                     ([1m[35mCharacter[39m[0m 1 1 () [])) 
                  ([1m[35mStringConstant[39m[0m "2" 
                     ([1m[35mCharacter[39m[0m 1 1 () []))] 
                  ([1m[35mStringConstant[39m[0m ":" 
                     ([1m[35mCharacter[39m[0m 1 1 () [])) ()) 
               ([1m[35mPrint[39m[0m () [
                  ([1m[35mStringConstant[39m[0m "LCompilers" 
                     ([1m[35mCharacter[39m[0m 1 10 () [])) 
                  ([1m[35mStringConstant[39m[0m "LPython" 
                     ([1m[35mCharacter[39m[0m 1 7 () []))] () ())] [1m[32m
               Source[39m[0m [1m[32m
               Public[39m[0m [1m[32m
               Implementation[39m[0m () .false. .false.)
      }) 
   [
   ([1m[35mSubroutineCall[39m[0m 1 [33mf[39m () [] ())])
#include <iostream>
#include <string>
#include <vector>
#include <cassert>
#include <cmath>
#include <complex>
#include <Kokkos_Core.hpp>
#include <lfortran_intrinsics.h>

template <typename T>
Kokkos::View<T*> from_std_vector(const std::vector<T> &v)
{
    Kokkos::View<T*> r("r", v.size());
    for (size_t i=0; i < v.size(); i++) {
        r(i) = v[i];
    }
    return r;
}

// Forward declarations
void _lpython_main_program();
void f();
namespace {
}

// Implementations
void _lpython_main_program()
{
    f();
}

void f()
{
    std::string x;
    std::string y;
    std::cout << "Hello World!" << std::endl;
    x = ",";
    y = "!!";
    std::cout << "a" << x << "b" << std::endl;
    x = "-+-+-";
    std::cout << "a" << x << "b" << x << "c" << std::endl;
    std::cout << "d" << "=" << "e" << "=" << "f" << std::endl;
    std::cout << "x" << "*\n" << "y" << "*\n" << "z" << std::endl;
    std::cout << "1" << ":" << "2" << std::endl;
    std::cout << "LCompilers" << " " << "LPython" << std::endl;
}

namespace {

void main2() {
    _lpython_main_program();
}

}
int main(int argc, char* argv[])
{
    Kokkos::initialize(argc, argv);
    main2();
    Kokkos::finalize();
    return 0;
}
