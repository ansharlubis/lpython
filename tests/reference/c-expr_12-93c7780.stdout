#include <inttypes.h>

#include <stdlib.h>
#include <stdbool.h>
#include <stdio.h>
#include <lfortran_intrinsics.h>

#define ASSERT(cond)                                                           \
    {                                                                          \
        if (!(cond)) {                                                         \
            printf("%s%s", "ASSERT failed: ", __FILE__);                       \
            printf("%s%s", "\nfunction ", __func__);                           \
            printf("%s%d%s", "(), line number ", __LINE__, " at \n");          \
            printf("%s%s", #cond, "\n");                                       \
            exit(1);                                                           \
        }                                                                      \
    }
#define ASSERT_MSG(cond, msg)                                                  \
    {                                                                          \
        if (!(cond)) {                                                         \
            printf("%s%s", "ASSERT failed: ", __FILE__);                       \
            printf("%s%s", "\nfunction ", __func__);                           \
            printf("%s%d%s", "(), line number ", __LINE__, " at \n");          \
            printf("%s%s", #cond, "\n");                                       \
            printf("%s", "ERROR MESSAGE:\n");                                  \
            printf("%s%s", msg, "\n");                                         \
            exit(1);                                                           \
        }                                                                      \
    }

// Forward declarations
void _lpython_main_program();
void check(int16_t **ptr);
void f();
void g(int16_t **x, int16_t *y);

// Implementations
void _lpython_main_program()
{
    f();
}

void check(int16_t **ptr)
{
    ASSERT((*ptr)[0 - 0] == 1);
    ASSERT((*ptr)[1 - 0] == 2);
}

void f()
{
    int16_t y[2];
    int16_t *yptr1;
    g(&yptr1, y);
    check(&yptr1);
}

void g(int16_t **x, int16_t *y)
{
    y[0 - 0] = 1;
    y[1 - 0] = 2;
    (*x) = y;
    printf("%d%s%d\n", (*x)[0 - 0], " ", (*x)[1 - 0]);
}

int main(int argc, char* argv[])
{
    _lpython_main_program();
    return 0;
}
