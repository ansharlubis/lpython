([1m[35mTranslationUnit[39m[0m 
   ([33mSymbolTable[39m 
      1 
      {
         fib: 
            ([1m[35mFunction[39m[0m 
               ([33mSymbolTable[39m 
                  2 
                  {
                     _lpython_return_variable: 
                        ([1m[35mVariable[39m[0m 
                           2 
                           _lpython_return_variable [1m[32m
                           ReturnVar[39m[0m () () [1m[32m
                           Default[39m[0m 
                           ([1m[35mInteger[39m[0m 8 []) [1m[32m
                           Source[39m[0m [1m[32m
                           Public[39m[0m [1m[32m
                           Required[39m[0m .false.), 
                     n: 
                        ([1m[35mVariable[39m[0m 
                           2 
                           n [1m[32m
                           In[39m[0m () () [1m[32m
                           Default[39m[0m 
                           ([1m[35mInteger[39m[0m 8 []) [1m[32m
                           Source[39m[0m [1m[32m
                           Public[39m[0m [1m[32m
                           Required[39m[0m .false.)
                  }) 
               fib [
               ([1m[35mVar[39m[0m 2 [33mn[39m)] [
               ([1m[35mIf[39m[0m 
                  ([1m[35mIntegerCompare[39m[0m 
                     ([1m[35mVar[39m[0m 2 [33mn[39m) [1m[32m
                     Lt[39m[0m 
                     ([1m[35mCast[39m[0m ([1m[35mIntegerConstant[39m[0m [36m2[39m 
                        ([1m[35mInteger[39m[0m 4 [])) [1m[32m
                        IntegerToInteger[39m[0m 
                        ([1m[35mInteger[39m[0m 8 []) ()) 
                     ([1m[35mLogical[39m[0m 4 []) ()) [
                  ([1m[35m=[39m[0m 
                     ([1m[35mVar[39m[0m 2 [33m_lpython_return_variable[39m) 
                     ([1m[35mVar[39m[0m 2 [33mn[39m) ()) 
                  ([1m[35mReturn[39m[0m)] [
                  ([1m[35m=[39m[0m 
                     ([1m[35mVar[39m[0m 2 [33m_lpython_return_variable[39m) 
                     ([1m[35mIntegerBinOp[39m[0m 
                        ([1m[35mFunctionCall[39m[0m 1 [33mfib[39m () [
                           (
                              ([1m[35mIntegerBinOp[39m[0m 
                                 ([1m[35mVar[39m[0m 2 [33mn[39m) [1m[32m
                                 Sub[39m[0m 
                                 ([1m[35mCast[39m[0m ([1m[35mIntegerConstant[39m[0m [36m1[39m 
                                    ([1m[35mInteger[39m[0m 4 [])) [1m[32m
                                    IntegerToInteger[39m[0m 
                                    ([1m[35mInteger[39m[0m 8 []) ()) 
                                 ([1m[35mInteger[39m[0m 8 []) ()))] 
                           ([1m[35mInteger[39m[0m 8 []) () ()) [1m[32m
                        Add[39m[0m 
                        ([1m[35mFunctionCall[39m[0m 1 [33mfib[39m () [
                           (
                              ([1m[35mIntegerBinOp[39m[0m 
                                 ([1m[35mVar[39m[0m 2 [33mn[39m) [1m[32m
                                 Sub[39m[0m 
                                 ([1m[35mCast[39m[0m ([1m[35mIntegerConstant[39m[0m [36m2[39m 
                                    ([1m[35mInteger[39m[0m 4 [])) [1m[32m
                                    IntegerToInteger[39m[0m 
                                    ([1m[35mInteger[39m[0m 8 []) ()) 
                                 ([1m[35mInteger[39m[0m 8 []) ()))] 
                           ([1m[35mInteger[39m[0m 8 []) () ()) 
                        ([1m[35mInteger[39m[0m 8 []) ()) ()) 
                  ([1m[35mReturn[39m[0m)])] 
               ([1m[35mVar[39m[0m 2 [33m_lpython_return_variable[39m) [1m[32m
               Source[39m[0m [1m[32m
               Public[39m[0m [1m[32m
               Implementation[39m[0m ()), 
         main: 
            ([1m[35mSubroutine[39m[0m 
               ([33mSymbolTable[39m 
                  4 
                  {
                     ans: 
                        ([1m[35mVariable[39m[0m 
                           4 
                           ans [1m[32m
                           Local[39m[0m () () [1m[32m
                           Default[39m[0m 
                           ([1m[35mInteger[39m[0m 8 []) [1m[32m
                           Source[39m[0m [1m[32m
                           Public[39m[0m [1m[32m
                           Required[39m[0m .false.)
                  }) 
               main [] [
               ([1m[35m=[39m[0m 
                  ([1m[35mVar[39m[0m 4 [33mans[39m) 
                  ([1m[35mFunctionCall[39m[0m 1 [33mfib[39m () [
                     (
                        ([1m[35mCast[39m[0m ([1m[35mIntegerConstant[39m[0m [36m10[39m 
                           ([1m[35mInteger[39m[0m 4 [])) [1m[32m
                           IntegerToInteger[39m[0m 
                           ([1m[35mInteger[39m[0m 8 []) ()))] 
                     ([1m[35mInteger[39m[0m 8 []) () ()) ()) 
               ([1m[35mAssert[39m[0m 
                  ([1m[35mIntegerCompare[39m[0m 
                     ([1m[35mVar[39m[0m 4 [33mans[39m) [1m[32m
                     Eq[39m[0m 
                     ([1m[35mCast[39m[0m ([1m[35mIntegerConstant[39m[0m [36m55[39m 
                        ([1m[35mInteger[39m[0m 4 [])) [1m[32m
                        IntegerToInteger[39m[0m 
                        ([1m[35mInteger[39m[0m 8 []) ()) 
                     ([1m[35mLogical[39m[0m 4 []) ()) ())] [1m[32m
               Source[39m[0m [1m[32m
               Public[39m[0m [1m[32m
               Implementation[39m[0m () .false. .false.), 
         main0: 
            ([1m[35mSubroutine[39m[0m 
               ([33mSymbolTable[39m 
                  3 
                  {
                     ans: 
                        ([1m[35mVariable[39m[0m 
                           3 
                           ans [1m[32m
                           Local[39m[0m () () [1m[32m
                           Default[39m[0m 
                           ([1m[35mInteger[39m[0m 8 []) [1m[32m
                           Source[39m[0m [1m[32m
                           Public[39m[0m [1m[32m
                           Required[39m[0m .false.)
                  }) 
               main0 [] [
               ([1m[35m=[39m[0m 
                  ([1m[35mVar[39m[0m 3 [33mans[39m) 
                  ([1m[35mFunctionCall[39m[0m 1 [33mfib[39m () [
                     (
                        ([1m[35mCast[39m[0m ([1m[35mIntegerConstant[39m[0m [36m15[39m 
                           ([1m[35mInteger[39m[0m 4 [])) [1m[32m
                           IntegerToInteger[39m[0m 
                           ([1m[35mInteger[39m[0m 8 []) ()))] 
                     ([1m[35mInteger[39m[0m 8 []) () ()) ()) 
               ([1m[35mAssert[39m[0m 
                  ([1m[35mIntegerCompare[39m[0m 
                     ([1m[35mVar[39m[0m 3 [33mans[39m) [1m[32m
                     Eq[39m[0m 
                     ([1m[35mCast[39m[0m ([1m[35mIntegerConstant[39m[0m [36m610[39m 
                        ([1m[35mInteger[39m[0m 4 [])) [1m[32m
                        IntegerToInteger[39m[0m 
                        ([1m[35mInteger[39m[0m 8 []) ()) 
                     ([1m[35mLogical[39m[0m 4 []) ()) ())] [1m[32m
               Source[39m[0m [1m[32m
               Public[39m[0m [1m[32m
               Implementation[39m[0m () .false. .false.)
      }) 
   [
   ([1m[35mSubroutineCall[39m[0m 1 [33mmain0[39m () [] ()) 
   ([1m[35mSubroutineCall[39m[0m 1 [33mmain[39m () [] ())])
; ModuleID = 'LFortran'
source_filename = "LFortran"

@0 = private unnamed_addr constant [16 x i8] c"AssertionError\0A\00", align 1
@1 = private unnamed_addr constant [16 x i8] c"AssertionError\0A\00", align 1

define void @_lpython_main_program() {
.entry:
  call void @main0()
  call void @_xx_lcompilers_changed_main_xx()
  br label %return

return:                                           ; preds = %.entry
  ret void
}

define i64 @fib(i64* %n) {
.entry:
  %call_arg_value1 = alloca i64, align 8
  %call_arg_value = alloca i64, align 8
  %_lpython_return_variable = alloca i64, align 8
  %0 = load i64, i64* %n, align 4
  %1 = icmp slt i64 %0, 2
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  %2 = load i64, i64* %n, align 4
  store i64 %2, i64* %_lpython_return_variable, align 4
  br label %return

unreachable_after_return:                         ; No predecessors!
  br label %ifcont

else:                                             ; preds = %.entry
  %3 = load i64, i64* %n, align 4
  %4 = sub i64 %3, 1
  store i64 %4, i64* %call_arg_value, align 4
  %5 = call i64 @fib(i64* %call_arg_value)
  %6 = load i64, i64* %n, align 4
  %7 = sub i64 %6, 2
  store i64 %7, i64* %call_arg_value1, align 4
  %8 = call i64 @fib(i64* %call_arg_value1)
  %9 = add i64 %5, %8
  store i64 %9, i64* %_lpython_return_variable, align 4
  br label %return

unreachable_after_return2:                        ; No predecessors!
  br label %ifcont

ifcont:                                           ; preds = %unreachable_after_return2, %unreachable_after_return
  br label %return

return:                                           ; preds = %ifcont, %else, %then
  %10 = load i64, i64* %_lpython_return_variable, align 4
  ret i64 %10
}

define void @_xx_lcompilers_changed_main_xx() {
.entry:
  %call_arg_value = alloca i64, align 8
  %ans = alloca i64, align 8
  store i64 10, i64* %call_arg_value, align 4
  %0 = call i64 @fib(i64* %call_arg_value)
  store i64 %0, i64* %ans, align 4
  %1 = load i64, i64* %ans, align 4
  %2 = icmp eq i64 %1, 55
  br i1 %2, label %then, label %else

then:                                             ; preds = %.entry
  br label %ifcont

else:                                             ; preds = %.entry
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @0, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  ret void
}

define void @main0() {
.entry:
  %call_arg_value = alloca i64, align 8
  %ans = alloca i64, align 8
  store i64 15, i64* %call_arg_value, align 4
  %0 = call i64 @fib(i64* %call_arg_value)
  store i64 %0, i64* %ans, align 4
  %1 = load i64, i64* %ans, align 4
  %2 = icmp eq i64 %1, 610
  br i1 %2, label %then, label %else

then:                                             ; preds = %.entry
  br label %ifcont

else:                                             ; preds = %.entry
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @1, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  ret void
}

declare void @_lfortran_printf(i8*, ...)

declare void @exit(i32)

define i32 @main() {
.entry:
  call void @_lpython_main_program()
  ret i32 0
}
