; ModuleID = 'LFortran'
source_filename = "LFortran"

%array = type { i32*, i32, %dimension_descriptor*, i1, i32 }
%dimension_descriptor = type { i32, i32, i32 }

@0 = private unnamed_addr constant [2 x i8] c" \00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@2 = private unnamed_addr constant [5 x i8] c"%d%s\00", align 1

define void @_lpython_main_program() {
.entry:
  call void @use_array()
  br label %return

return:                                           ; preds = %.entry
  ret void
}

define void @use_array() {
.entry:
  %array = alloca %array, align 8
  %0 = getelementptr %array, %array* %array, i32 0, i32 1
  store i32 0, i32* %0, align 4
  %1 = getelementptr %array, %array* %array, i32 0, i32 2
  %2 = alloca i32, align 4
  store i32 1, i32* %2, align 4
  %3 = load i32, i32* %2, align 4
  %4 = alloca %dimension_descriptor, i32 %3, align 8
  %5 = getelementptr %array, %array* %array, i32 0, i32 4
  store i32 1, i32* %5, align 4
  store %dimension_descriptor* %4, %dimension_descriptor** %1, align 8
  %6 = load %dimension_descriptor*, %dimension_descriptor** %1, align 8
  %7 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %6, i32 0
  %8 = getelementptr %dimension_descriptor, %dimension_descriptor* %7, i32 0, i32 0
  %9 = getelementptr %dimension_descriptor, %dimension_descriptor* %7, i32 0, i32 1
  %10 = getelementptr %dimension_descriptor, %dimension_descriptor* %7, i32 0, i32 2
  store i32 1, i32* %8, align 4
  store i32 0, i32* %9, align 4
  store i32 1, i32* %10, align 4
  %11 = alloca i32, align 4
  store i32 1, i32* %11, align 4
  %12 = getelementptr %array, %array* %array, i32 0, i32 0
  %13 = load i32, i32* %11, align 4
  %14 = alloca i32, i32 %13, align 4
  store i32* %14, i32** %12, align 8
  %x = alloca i32, align 4
  store i32 69, i32* %x, align 4
  %15 = alloca %array, align 8
  %16 = call i32 @__lpython_generic_f_0(%array* %array, i32* %x)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i32 %16, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  br label %return

return:                                           ; preds = %.entry
  ret void
}

define i32 @__lpython_generic_f_0(%array* %lst, i32* %i) {
.entry:
  %_lpython_return_variable = alloca i32, align 4
  %0 = getelementptr %array, %array* %lst, i32 0, i32 2
  %1 = load %dimension_descriptor*, %dimension_descriptor** %0, align 8
  %2 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %1, i32 0
  %3 = getelementptr %dimension_descriptor, %dimension_descriptor* %2, i32 0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = sub i32 0, %4
  %6 = mul i32 1, %5
  %7 = add i32 0, %6
  %8 = getelementptr %dimension_descriptor, %dimension_descriptor* %2, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = mul i32 1, %9
  %11 = getelementptr %array, %array* %lst, i32 0, i32 0
  %12 = load i32*, i32** %11, align 8
  %13 = getelementptr inbounds i32, i32* %12, i32 %7
  %14 = load i32, i32* %i, align 4
  store i32 %14, i32* %13, align 4
  %15 = getelementptr %array, %array* %lst, i32 0, i32 2
  %16 = load %dimension_descriptor*, %dimension_descriptor** %15, align 8
  %17 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %16, i32 0
  %18 = getelementptr %dimension_descriptor, %dimension_descriptor* %17, i32 0, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = sub i32 0, %19
  %21 = mul i32 1, %20
  %22 = add i32 0, %21
  %23 = getelementptr %dimension_descriptor, %dimension_descriptor* %17, i32 0, i32 2
  %24 = load i32, i32* %23, align 4
  %25 = mul i32 1, %24
  %26 = getelementptr %array, %array* %lst, i32 0, i32 0
  %27 = load i32*, i32** %26, align 8
  %28 = getelementptr inbounds i32, i32* %27, i32 %22
  %29 = load i32, i32* %28, align 4
  store i32 %29, i32* %_lpython_return_variable, align 4
  br label %return

unreachable_after_return:                         ; No predecessors!
  br label %return

return:                                           ; preds = %unreachable_after_return, %.entry
  %30 = load i32, i32* %_lpython_return_variable, align 4
  ret i32 %30
}

declare void @_lfortran_printf(i8*, ...)

define i32 @main() {
.entry:
  call void @_lpython_main_program()
  ret i32 0
}
