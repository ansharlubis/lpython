([1m[35mTranslationUnit[39m[0m 
   ([33mSymbolTable[39m 
      1 
      {
         fib: 
            ([1m[35mFunction[39m[0m 
               ([33mSymbolTable[39m 
                  2 
                  {
                     _lpython_return_variable: 
                        ([1m[35mVariable[39m[0m 
                           2 
                           _lpython_return_variable [1m[32m
                           ReturnVar[39m[0m () () [1m[32m
                           Default[39m[0m 
                           ([1m[35mInteger[39m[0m 8 []) [1m[32m
                           Source[39m[0m [1m[32m
                           Public[39m[0m [1m[32m
                           Required[39m[0m .false.), 
                     n: 
                        ([1m[35mVariable[39m[0m 
                           2 
                           n [1m[32m
                           In[39m[0m () () [1m[32m
                           Default[39m[0m 
                           ([1m[35mInteger[39m[0m 8 []) [1m[32m
                           Source[39m[0m [1m[32m
                           Public[39m[0m [1m[32m
                           Required[39m[0m .false.)
                  }) 
               fib [
               ([1m[35mVar[39m[0m 2 [33mn[39m)] [
               ([1m[35mIf[39m[0m 
                  ([1m[35mIntegerCompare[39m[0m 
                     ([1m[35mVar[39m[0m 2 [33mn[39m) [1m[32m
                     Lt[39m[0m 
                     ([1m[35mCast[39m[0m ([1m[35mIntegerConstant[39m[0m [36m2[39m 
                        ([1m[35mInteger[39m[0m 4 [])) [1m[32m
                        IntegerToInteger[39m[0m 
                        ([1m[35mInteger[39m[0m 8 []) ()) 
                     ([1m[35mLogical[39m[0m 4 []) ()) [
                  ([1m[35m=[39m[0m 
                     ([1m[35mVar[39m[0m 2 [33m_lpython_return_variable[39m) 
                     ([1m[35mVar[39m[0m 2 [33mn[39m) ()) 
                  ([1m[35mReturn[39m[0m)] [
                  ([1m[35m=[39m[0m 
                     ([1m[35mVar[39m[0m 2 [33m_lpython_return_variable[39m) 
                     ([1m[35mIntegerBinOp[39m[0m 
                        ([1m[35mFunctionCall[39m[0m 1 [33mfib[39m () [
                           (
                              ([1m[35mIntegerBinOp[39m[0m 
                                 ([1m[35mVar[39m[0m 2 [33mn[39m) [1m[32m
                                 Sub[39m[0m 
                                 ([1m[35mCast[39m[0m ([1m[35mIntegerConstant[39m[0m [36m1[39m 
                                    ([1m[35mInteger[39m[0m 4 [])) [1m[32m
                                    IntegerToInteger[39m[0m 
                                    ([1m[35mInteger[39m[0m 8 []) ()) 
                                 ([1m[35mInteger[39m[0m 8 []) ()))] 
                           ([1m[35mInteger[39m[0m 8 []) () ()) [1m[32m
                        Add[39m[0m 
                        ([1m[35mFunctionCall[39m[0m 1 [33mfib[39m () [
                           (
                              ([1m[35mIntegerBinOp[39m[0m 
                                 ([1m[35mVar[39m[0m 2 [33mn[39m) [1m[32m
                                 Sub[39m[0m 
                                 ([1m[35mCast[39m[0m ([1m[35mIntegerConstant[39m[0m [36m2[39m 
                                    ([1m[35mInteger[39m[0m 4 [])) [1m[32m
                                    IntegerToInteger[39m[0m 
                                    ([1m[35mInteger[39m[0m 8 []) ()) 
                                 ([1m[35mInteger[39m[0m 8 []) ()))] 
                           ([1m[35mInteger[39m[0m 8 []) () ()) 
                        ([1m[35mInteger[39m[0m 8 []) ()) ()) 
                  ([1m[35mReturn[39m[0m)])] 
               ([1m[35mVar[39m[0m 2 [33m_lpython_return_variable[39m) [1m[32m
               Source[39m[0m [1m[32m
               Public[39m[0m [1m[32m
               Implementation[39m[0m ()), 
         main: 
            ([1m[35mSubroutine[39m[0m 
               ([33mSymbolTable[39m 
                  4 
                  {
                     ans: 
                        ([1m[35mVariable[39m[0m 
                           4 
                           ans [1m[32m
                           Local[39m[0m () () [1m[32m
                           Default[39m[0m 
                           ([1m[35mInteger[39m[0m 8 []) [1m[32m
                           Source[39m[0m [1m[32m
                           Public[39m[0m [1m[32m
                           Required[39m[0m .false.)
                  }) 
               main [] [
               ([1m[35m=[39m[0m 
                  ([1m[35mVar[39m[0m 4 [33mans[39m) 
                  ([1m[35mFunctionCall[39m[0m 1 [33mfib[39m () [
                     (
                        ([1m[35mCast[39m[0m ([1m[35mIntegerConstant[39m[0m [36m10[39m 
                           ([1m[35mInteger[39m[0m 4 [])) [1m[32m
                           IntegerToInteger[39m[0m 
                           ([1m[35mInteger[39m[0m 8 []) ()))] 
                     ([1m[35mInteger[39m[0m 8 []) () ()) ()) 
               ([1m[35mAssert[39m[0m 
                  ([1m[35mIntegerCompare[39m[0m 
                     ([1m[35mVar[39m[0m 4 [33mans[39m) [1m[32m
                     Eq[39m[0m 
                     ([1m[35mCast[39m[0m ([1m[35mIntegerConstant[39m[0m [36m55[39m 
                        ([1m[35mInteger[39m[0m 4 [])) [1m[32m
                        IntegerToInteger[39m[0m 
                        ([1m[35mInteger[39m[0m 8 []) ()) 
                     ([1m[35mLogical[39m[0m 4 []) ()) ())] [1m[32m
               Source[39m[0m [1m[32m
               Public[39m[0m [1m[32m
               Implementation[39m[0m () .false. .false.), 
         main0: 
            ([1m[35mSubroutine[39m[0m 
               ([33mSymbolTable[39m 
                  3 
                  {
                     ans: 
                        ([1m[35mVariable[39m[0m 
                           3 
                           ans [1m[32m
                           Local[39m[0m () () [1m[32m
                           Default[39m[0m 
                           ([1m[35mInteger[39m[0m 8 []) [1m[32m
                           Source[39m[0m [1m[32m
                           Public[39m[0m [1m[32m
                           Required[39m[0m .false.)
                  }) 
               main0 [] [
               ([1m[35m=[39m[0m 
                  ([1m[35mVar[39m[0m 3 [33mans[39m) 
                  ([1m[35mFunctionCall[39m[0m 1 [33mfib[39m () [
                     (
                        ([1m[35mCast[39m[0m ([1m[35mIntegerConstant[39m[0m [36m15[39m 
                           ([1m[35mInteger[39m[0m 4 [])) [1m[32m
                           IntegerToInteger[39m[0m 
                           ([1m[35mInteger[39m[0m 8 []) ()))] 
                     ([1m[35mInteger[39m[0m 8 []) () ()) ()) 
               ([1m[35mAssert[39m[0m 
                  ([1m[35mIntegerCompare[39m[0m 
                     ([1m[35mVar[39m[0m 3 [33mans[39m) [1m[32m
                     Eq[39m[0m 
                     ([1m[35mCast[39m[0m ([1m[35mIntegerConstant[39m[0m [36m610[39m 
                        ([1m[35mInteger[39m[0m 4 [])) [1m[32m
                        IntegerToInteger[39m[0m 
                        ([1m[35mInteger[39m[0m 8 []) ()) 
                     ([1m[35mLogical[39m[0m 4 []) ()) ())] [1m[32m
               Source[39m[0m [1m[32m
               Public[39m[0m [1m[32m
               Implementation[39m[0m () .false. .false.)
      }) 
   [
   ([1m[35mSubroutineCall[39m[0m 1 [33mmain0[39m () [] ()) 
   ([1m[35mSubroutineCall[39m[0m 1 [33mmain[39m () [] ())])
#include <inttypes.h>

#include <stdlib.h>
#include <stdbool.h>
#include <stdio.h>
#include <lfortran_intrinsics.h>

#define ASSERT(cond)                                                           \
    {                                                                          \
        if (!(cond)) {                                                         \
            printf("%s%s", "ASSERT failed: ", __FILE__);                       \
            printf("%s%s", "\nfunction ", __func__);                           \
            printf("%s%d%s", "(), line number ", __LINE__, " at \n");          \
            printf("%s%s", #cond, "\n");                                       \
            exit(1);                                                           \
        }                                                                      \
    }
#define ASSERT_MSG(cond, msg)                                                  \
    {                                                                          \
        if (!(cond)) {                                                         \
            printf("%s%s", "ASSERT failed: ", __FILE__);                       \
            printf("%s%s", "\nfunction ", __func__);                           \
            printf("%s%d%s", "(), line number ", __LINE__, " at \n");          \
            printf("%s%s", #cond, "\n");                                       \
            printf("%s", "ERROR MESSAGE:\n");                                  \
            printf("%s%s", msg, "\n");                                         \
            exit(1);                                                           \
        }                                                                      \
    }

// Forward declarations
void _lpython_main_program();
int64_t fib(int64_t n);
void _xx_lcompilers_changed_main_xx();
void main0();

// Implementations
void _lpython_main_program()
{
    main0();
    main();
}

int64_t fib(int64_t n)
{
    int64_t _lpython_return_variable;
    if (n < 2) {
        _lpython_return_variable = n;
        return _lpython_return_variable;
    } else {
        _lpython_return_variable = fib(n - 1) + fib(n - 2);
        return _lpython_return_variable;
    }
    return _lpython_return_variable;
}

void _xx_lcompilers_changed_main_xx()
{
    int64_t ans;
    ans = fib(10);
    ASSERT(ans == 55);
}

void main0()
{
    int64_t ans;
    ans = fib(15);
    ASSERT(ans == 610);
}

int main(int argc, char* argv[])
{
    _lpython_main_program();
    return 0;
}
