([1m[35mTranslationUnit[39m[0m 
   ([33mSymbolTable[39m 
      1 
      {
         test_assert: 
            ([1m[35mSubroutine[39m[0m 
               ([33mSymbolTable[39m 
                  2 
                  {
                     a: 
                        ([1m[35mVariable[39m[0m 
                           2 
                           a [1m[32m
                           Local[39m[0m () () [1m[32m
                           Default[39m[0m 
                           ([1m[35mInteger[39m[0m 4 []) [1m[32m
                           Source[39m[0m [1m[32m
                           Public[39m[0m [1m[32m
                           Required[39m[0m .false.)
                  }) 
               test_assert [] [
               ([1m[35m=[39m[0m 
                  ([1m[35mVar[39m[0m 2 [33ma[39m) ([1m[35mIntegerConstant[39m[0m [36m5[39m 
                  ([1m[35mInteger[39m[0m 4 [])) ()) 
               ([1m[35mAssert[39m[0m 
                  ([1m[35mIntegerCompare[39m[0m 
                     ([1m[35mVar[39m[0m 2 [33ma[39m) [1m[32m
                     Eq[39m[0m ([1m[35mIntegerConstant[39m[0m [36m5[39m 
                     ([1m[35mInteger[39m[0m 4 [])) 
                     ([1m[35mLogical[39m[0m 4 []) ()) 
                  ([1m[35mStringConstant[39m[0m "a is not 5" 
                     ([1m[35mCharacter[39m[0m 1 10 () []))) 
               ([1m[35mAssert[39m[0m 
                  ([1m[35mIntegerCompare[39m[0m 
                     ([1m[35mVar[39m[0m 2 [33ma[39m) [1m[32m
                     NotEq[39m[0m ([1m[35mIntegerConstant[39m[0m [36m10[39m 
                     ([1m[35mInteger[39m[0m 4 [])) 
                     ([1m[35mLogical[39m[0m 4 []) ()) ())] [1m[32m
               Source[39m[0m [1m[32m
               Public[39m[0m [1m[32m
               Implementation[39m[0m () .false. .false.)
      }) 
   [])
(TranslationUnit (SymbolTable 1 {main_program: (Program (SymbolTable 3 {}) main_program [] []), test_assert: (Subroutine (SymbolTable 2 {a: (Variable 2 a Local () () Default (Integer 4 []) Source Public Required .false.)}) test_assert [] [(= (Var 2 a) (IntegerConstant 5 (Integer 4 [])) ()) (Assert (IntegerCompare (Var 2 a) Eq (IntegerConstant 5 (Integer 4 [])) (Logical 4 []) ()) (StringConstant "a is not 5" (Character 1 10 () []))) (Assert (IntegerCompare (Var 2 a) NotEq (IntegerConstant 10 (Integer 4 [])) (Logical 4 []) ()) ())] Source Public Implementation () .false. .false.)}) [])
